name: Angular Calculator Actions

on:
  push:
    branches:
    - main

jobs:

  unit-test:
    name: Application unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Node install
        uses: actions/setup-node@v2
        with:
          node-version: '14.17.1'

      - name: Install dependencies
        run: npm install

      - name: Test Application
        run: npm run test:headless

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

  e2e-test:
    name: E2E application test
    run-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-

             - name: install dependencies and verify Cypress
          env:
            # make sure every Cypress install prints minimal information
            CI: 1
          # print Cypress and OS info
          run: |
            npm ci
            npx cypress verify
            npx cypress info
            npx cypress version
            npx cypress version --component package
            npx cypress version --component binary
            npx cypress version --component electron
            npx cypress version --component node
        # Starts local server, then runs Cypress tests and records results on the dashboard
        - name: Cypress tests
          run: npm run test:ci:record
          env:
            # place your secret record key at
            # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
            CYPRESS_RECORD_KEY: ${{ secrets.dashboardRecordKey }}
            TERM: xterm

        # Save videos and screenshots as test artifacts
        # https://github.com/actions/upload-artifact
        - uses: actions/upload-artifact@master
          with:
            name: screenshots
            path: cypress/screenshots
            # there might be no screenshots created when:
            # - there are no test failures
            # so only upload screenshots if previous step has failed
            if: failure()
        # video should always be generated
        - uses: actions/upload-artifact@master
          with:
            name: videos
            path: cypress/videos

  build:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [unit-test, e2e-test]
    steps:
      - uses: actions/checkout@v2

      - name: Node install
        uses: actions/setup-node@v2
        with:
          node-version: '16.14.0'

      - name: Install dependencies
        run: npm install

      - name: Build App
        run: npm run build

      - name: Deploy vercel
        if: success()
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          vercel-args: '--prod' #Optional
          vercel-org-id: ${{ secrets.ORG_ID}}  #Required
          vercel-project-id: ${{ secrets.PROJECT_ID}} #Required

